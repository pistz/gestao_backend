// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Definição da tabela 'Turma'
model Course {
  id           String           @id @default(uuid())
  name         String
  startingYear Int
  students     CourseStudent[] // Relacionamento muitos-para-muitos com alunos através da tabela de junção CourseStudent
  lists        AttendanceList[] // Lista de presença associada ao curso (um-para-muitos)
  school       School           @relation(fields: [schoolId], references: [id])
  schoolId     String
  createdAt    DateTime         @default(now())
  modifiedAt   DateTime         @updatedAt
}

// Definição da tabela 'Aluno'
model Student {
  id         Int                     @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String                  @unique
  courses    CourseStudent[] // Relacionamento muitos-para-muitos com cursos através da tabela de junção CourseStudent
  lists      AttendanceListStudent[] // Relacionamento muitos-para-muitos com listas de presença através da tabela de junção AttendanceListStudent
  createdAt  DateTime                @default(now())
  modifiedAt DateTime                @updatedAt
}

// Definição da tabela 'ListaPresenca'
model AttendanceList {
  id             String                  @id @default(uuid())
  attendanceDate String                  @unique
  createdAt      DateTime                @default(now())
  modifiedAt     DateTime                @updatedAt
  Course         Course                  @relation(fields: [courseId], references: [id])
  courseId       String
  students       AttendanceListStudent[] // Relacionamento muitos-para-muitos com alunos através da tabela de junção AttendanceListStudent
}

model CourseStudent {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String
}

model AttendanceListStudent {
  id               String         @id @default(uuid())
  student          Student        @relation(fields: [studentId], references: [id])
  studentId        Int
  attendanceList   AttendanceList @relation(fields: [attendanceListId], references: [id])
  attendanceListId String
}

// Definição da tabela 'Usuario'
model User {
  id            String   @id @default(uuid())
  userFirstName String
  userLastName  String
  email         String   @unique
  password      String
  role          Role     @default(DESK)
  school        School   @relation(fields: [schoolId], references: [id])
  schoolId      String
  createdAt     DateTime @default(now())
  modifiedAt    DateTime @updatedAt
}

model School {
  id         String   @id @default(uuid())
  schoolName String   @unique
  users      User[]
  courses    Course[]
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  DESK
  PROFESSOR
}
